#
# # Computation and assignation of the variable means for each cluster
#
# for (i in 1:k) {
#   for (variableName in colnames(data)) {
#     if (!is.factor(data[,variableName])) {
#       data[data$CLUSTER == i & is.na(data[,variableName]), variableName] <- mean(data[data$CLUSTER == i & !is.na(data[,variableName]), variableName])
#     }
#   }
# }
#
# # Deletes cluster column
# data_pending_missing_imputation <- subset(data_pending_missing_imputation, select = -c(CLUSTER))
#
# # Detects the number of NA in each column
# percentatgesNA = data.frame(matrix(0, length(data), 3))
# names(percentatgesNA) = c("Variable", "Factor", "Percentage")
#
# for (i in 1:ncol(data_pending_missing_imputation)){
#   percentatgesNA[i,]$Variable <- names(data_pending_missing_imputation)[i]
#
#   percentatgesNA[i,]$Factor <- is.factor(data_pending_missing_imputation[,i])
#
#   numNA <- sum(is.na(data_pending_missing_imputation[i]))
#   percentatgesNA[i,]$Percentage <- numNA/nrow(data_pending_missing_imputation) * 100
# }
vars_according_NAs <- as.data.frame(lapply(data_pending_missing_imputation, function(x) if (is.numeric(x)) return(sum(is.na(x))) else return(-1)))
colnames(vars_according_NAs)
fullVariables <- c()
uncompleteVars <- c()
for (var in colnames(vars_according_NAs)){
if (vars_according_NAs[var] > 0) {
uncompleteVars <- c(uncompleteVars,vars_according_NAs[var])
}
for (row in 1:nrow(clustersMatchTable)) {
N <- clustersMatchTable[row, "N"]
Y  <- clustersMatchTable[row, "Y"]
}
table
table
รงรง
table(clustersMatchTable)
clustersMatchTable
table(clustersMatchTable)
table(clustersMatchTable)
table(clustersMatchTable)
table(clustersMatchTable)
table(clustersMatchTable)
table(clustersMatchTable)
table
table(clustersMatchTable)
table(clustersMatchTable)
table(clustersMatchTable)
table(clustersMatchTable)
table(clustersMatchTable)
func()
func <- function() {
return (5+4)
}
func()
table <- function(clustersMatchTable, row) {
vector <- 1:nrow(clustersMatchTable)
for (row in 1:nrow(clustersMatchTable)) {
N <- clustersMatchTable[row, "N"] + N;
Y <- clustersMatchTable[row, "Y"] + Y;
}
return (vector)
}
func()
table(clustersMatchTable)
table <- function(clustersMatchTable, row) {
vector <- 1:nrow(clustersMatchTable)
for (row in 1:nrow(clustersMatchTable)) {
N <- clustersMatchTable[row, "N"];
Y <- clustersMatchTable[row, "Y"];
vector[row] <- Y/N
}
return (vector)
}
table(clustersMatchTable)
table <- function(clustersMatchTable, row) {
vector <- 1:nrow(clustersMatchTable)
for (row in 1:nrow(clustersMatchTable)) {
N <- clustersMatchTable[row, "N"];
Y <- clustersMatchTable[row, "Y"];
vector[row] <- (Y/N)*100
}
return (vector)
}
table(clustersMatchTable)
table(clustersMatchTable)
clustersMatchTable
getMatchChanceForEachCluster <- function(clustersMatchTable) {
vector <- 1:nrow(clustersMatchTable)
for (row in 1:nrow(clustersMatchTable)) {
N <- clustersMatchTable[row, "N"];
Y <- clustersMatchTable[row, "Y"];
vector[row] <- (Y/N)*100
}
return (vector)
}
}
fullVariables <- colnames(as.data.frame(fullVariables))
uncompleteVars <- sort(as.data.frame(uncompleteVars))
aux<-data_pending_missing_imputation[,fullVariables]
library(class)
for (k in colnames(as.data.frame(uncompleteVars))){
aux1 <- aux[!is.na(data_pending_missing_imputation[,k]),]
dim(aux1)
aux2 <- aux[is.na(data_pending_missing_imputation[,k]),]
dim(aux2)
RefValues<- data_pending_missing_imputation[!is.na(data_pending_missing_imputation[,k]),k]
#Find nns for aux2
knn.values = knn(aux1,aux2,RefValues)
#CARE: neither aux1 nor aux2 can contain NAs
#CARE: knn.ing is generated as a factor.
#Be sure to retrieve the correct values
data_pending_missing_imputation[is.na(data_pending_missing_imputation[,k]),k] = as.numeric(as.character(knn.values))
fullVariables<-c(fullVariables, k)
aux<-data_pending_missing_imputation[,fullVariables]
}
data_after_imputation <- data_pending_missing_imputation
# NEW VARIABLES
# We are going to create the var "difference of age"
data_after_imputation$diff_age <- abs(data_after_imputation$age - data_after_imputation$age_o)
# Correct out of scale knn values
data_after_imputation$like[data_after_imputation$like < 1] <- 1
# 100 scale
data_after_imputation$pf_sum <- rowSums(data_after_imputation[,c("pf_o_att", "pf_o_sin", "pf_o_fun", "pf_o_int", "pf_o_amb", "pf_o_sha")])
data_after_imputation$at_o_sum <- rowSums(data_after_imputation[,c("attr_o", "sinc_o", "intel_o", "fun_o", "amb_o", "shar_o")])
# No rows with total = 0for pf_sum. Only one for at_o_sum. We are going to delete it.
data_after_imputation<-data_after_imputation[data_after_imputation$pf_sum != 0 & data_after_imputation$at_o_sum != 0,]
# Scale: they must add up to 100
data_after_imputation$pf_o_att <- round(data_after_imputation$pf_o_att/data_after_imputation$pf_sum*100)
data_after_imputation$pf_o_sin <- round(data_after_imputation$pf_o_sin/data_after_imputation$pf_sum*100)
data_after_imputation$pf_o_fun <- round(data_after_imputation$pf_o_fun/data_after_imputation$pf_sum*100)
data_after_imputation$pf_o_int <- round(data_after_imputation$pf_o_int/data_after_imputation$pf_sum*100)
data_after_imputation$pf_o_amb <- round(data_after_imputation$pf_o_amb/data_after_imputation$pf_sum*100)
data_after_imputation$pf_o_sha <- round(data_after_imputation$pf_o_sha/data_after_imputation$pf_sum*100)
data_after_imputation$attr_o <- round(data_after_imputation$attr_o/data_after_imputation$at_o_sum*100)
data_after_imputation$sinc_o <- round(data_after_imputation$sinc_o/data_after_imputation$at_o_sum*100)
data_after_imputation$intel_o <- round(data_after_imputation$intel_o/data_after_imputation$at_o_sum*100)
data_after_imputation$fun_o <- round(data_after_imputation$fun_o/data_after_imputation$at_o_sum*100)
data_after_imputation$amb_o <- round(data_after_imputation$amb_o/data_after_imputation$at_o_sum*100)
data_after_imputation$shar_o <- round(data_after_imputation$shar_o/data_after_imputation$at_o_sum*100)
data_after_imputation$pf_sum <- NULL
data_after_imputation$at_o_sum <- NULL
sum(is.na(data_after_imputation))
summary(data_after_imputation)
write.csv(data_after_imputation, file = "SpeedClean.csv")
original_data <-read.csv("SpeedClean.csv", header=TRUE,na.strings=c("","NA"))
sum(is.na(original_data))
speed_data <-read.csv("SpeedClean.csv",header = TRUE)
#gender:
#Counting the values of both available gender:
summary(speed_data$gender)
# Asian Black  Cauc Latin Other
# 756   201  2199   289   211
# There are two big groups of races within the Speeddating sessions: Asian and Cauc
barplot(summary(speed_data$race_o))
# pf_o_fun:
summary(speed_data$pf_o_fun)
barplot(summary(speed_data$field_cd))
barplot(summary(speed_data$go_out))
barplot(summary(speed_data$date))
barplot(summary(speed_data$goal))
barplot(summary(speed_data$race))
barplot(summary(speed_data$date))
barplot(summary(speed_data$go_out))
barplot(summary(speed_data$field_cd))
